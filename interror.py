#!/usr/bin/env python3

import textfsm
import datetime
import os
import yaml

author = 'Michael Lorincz'
version = '0.9.9'

with open("config.yml", "r") as file:
    config = yaml.load(file, Loader=yaml.FullLoader)

#// Threshold Variables set in config.yml
input_error_threshold = config["threshold_variables"]["input_error_threshold"]
output_error_threshold = config["threshold_variables"]["output_error_threshold"]
overrun_error_threshold = config["threshold_variables"]["overrun_error_threshold"]
crc_error_threshold = config["threshold_variables"]["crc_error_threshold"]
frame_error_threshold = config["threshold_variables"]["frame_error_threshold"]
runts_error_threshold = config["threshold_variables"]["runts_error_threshold"]
giants_error_threshold = config["threshold_variables"]["giants_error_threshold"]
input_folder = config["file_variables"]["input_folder"]
input_filetype = config["file_variables"]["input_filetype"]
output_folder = config["file_variables"]["output_folder"]
dec_place = config["decimal_variables"]["dec_place"]
int_status = config["interface_variables"]["int_status_up"]

#// Get the current date and time
now = datetime.datetime.now()

#// list of error and packet fields from the TextFSM template
error_fields = ['INPUT_ERRORS', 'CRC', 'ABORT', 'OUTPUT_ERRORS', 'OVERRUN', 'FRAME', 'RUNTS', 'GIANTS']
packet_fields = ['INPUT_PACKETS', 'OUTPUT_PACKETS']

#// Print the script header
print("")
print("*** Starting IntError Script. ***")
print("")
#// INPUT FILE - Identify the files in the input folder, and parse each file if it ends with the input_filetype
for log_file in os.listdir(input_folder):
    if log_file.endswith(input_filetype):
        input_file = os.path.join(input_folder, log_file)
        input_file_name = os.path.splitext(os.path.basename(input_file))[0]
        #// Create a TextFSM object and Parse the input text using the FSM table
        textfsm_template = "./templates/cisco_ios_show_interfaces.textfsm"
        re_table = textfsm.TextFSM(open(textfsm_template))
        fsm_results = re_table.ParseText(open(input_file).read())
        re_table.Reset()
        #// Check interface status. If 'True' then only check interfaces that are 'up'.
        if int_status == True:
            #// OUTPUT FILE - Create Output text file with the input file name and a timestamp appended
            with open(output_folder+now.strftime("%Y-%m-%d_")+input_file_name + "_errors" + ".txt", 'w') as f:
                output_file_name = os.path.splitext(os.path.basename(f.name))[0]
                fulloutput_file_name = os.path.basename(f.name)
                err = 0
                print("Processing: '" + fulloutput_file_name+"'")
                f.write("Generated by IntError Script on "+ now.strftime("%Y-%m-%d %H:%M")+" from file '"+input_file_name+"'."'\n\n')
                f.write("The following interfaces have errors:"'\n\n')
                f.write('--------------------------------------------------------'+'\n\n')
                for row in fsm_results:
                    #//  First, exclude any intefaces you want to exclude from the report
                    if 'Embedded-Service' in row[0]:
                        continue
                    if row[1] != 'up':
                        continue
                    #// if the interface has errors, then grab interface + description details and calculate the percentage of errors
                    has_errors = any(row[re_table.header.index(error_field)] not in ('0', 0, '') for error_field in error_fields)
                    if has_errors:
                        err = 1
                        if row[re_table.header.index('INPUT_PACKETS')] == '':
                            input_packets = 0
                        elif row[re_table.header.index('INPUT_PACKETS')] != 0:
                            input_packets = int(row[re_table.header.index('INPUT_PACKETS')])
                        if row[re_table.header.index('OUTPUT_PACKETS')] == '':
                            output_packets = 0
                        elif row[re_table.header.index('OUTPUT_PACKETS')] != 0:
                            output_packets = int(row[re_table.header.index('OUTPUT_PACKETS')])
                        interface_num = row[re_table.header.index('INTERFACE')]
                        description = row[re_table.header.index('DESCRIPTION')]
                        input_errors = int(row[re_table.header.index('INPUT_ERRORS')])
                        crc_errors = int(row[re_table.header.index('CRC')])
                        overrun_errors = int(row[re_table.header.index('OVERRUN')])
                        frame_errors = int(row[re_table.header.index('FRAME')])
                        runts_errors = int(row[re_table.header.index('RUNTS')])
                        giants_errors = int(row[re_table.header.index('GIANTS')])
                        output_errors = int(row[re_table.header.index('OUTPUT_ERRORS')])
                        #// calculate the percentage of errors for each error type. If there are no packets, then the percentage is 0.
                        if input_packets == 0:
                            input_errors_percentage = 0.0
                            crc_errors_percentage = 0.0
                            overrun_errors_percentage = 0.0
                            frame_errors_percentage = 0.0
                            runts_errors_percentage = 0.0
                            giants_errors_percentage = 0.0
                        elif output_packets == 0:
                            output_errors_percentage = 0.0
                        else:
                            if input_packets == 0:
                                input_errors_percentage = 0.0
                            else:
                                input_errors_percentage = dec_place.format(input_errors / input_packets)
                            if output_packets == 0:
                                output_errors_percentage = 0.0
                            else:
                                output_errors_percentage = dec_place.format(output_errors / output_packets)
                            if crc_errors == 0:
                                crc_errors_percentage = 0.0
                            else:
                                crc_errors_percentage = dec_place.format(crc_errors / input_packets)
                            if overrun_errors == 0:
                                overrun_errors_percentage = 0.0
                            else:
                                overrun_errors_percentage = dec_place.format(overrun_errors / input_packets)
                            if frame_errors == 0:
                                frame_errors_percentage = 0.0
                            else:
                                frame_errors_percentage = dec_place.format(frame_errors / input_packets)
                            if runts_errors == 0:
                                runts_errors_percentage = 0.0
                            else:
                                runts_errors_percentage = dec_place.format(runts_errors / input_packets)
                            if giants_errors == 0:
                                giants_errors_percentage = 0.0
                            else:
                                giants_errors_percentage = dec_place.format(giants_errors / input_packets)
                        #// if the interface has errors, then write the results to the file.
                        f.write(interface_num+'\n')
                        f.write('Description: '+description+'\n')
                        f.write('Status: '+row[1]+'\n')
                        if input_errors != 0 and input_packets == 0:
                            f.write("ERROR: Total input packets are 0 but output errors are " + str(input_errors)+". Please check the interface manually.\n")
                        else:
                            if input_errors != 0 and input_packets != 0:
                                message = "Input Errors: " + str(input_errors) + " (" + input_errors_percentage + ' of all input packets' + ")"
                                if float(input_errors_percentage.strip('%')) >= input_error_threshold:
                                    message += " !!ALERT!! Input Errors are above threshold. Threshold currently set to: " + str(input_error_threshold)+"%."
                                f.write(message + '\n')
                        if crc_errors != 0 and input_packets == 0:
                            f.write("ERROR: Total input packets are 0 but CRC errors are: " + str(crc_errors)+". Please check the interface manually.\n")
                        else:
                            if crc_errors != 0 and input_packets != 0:
                                message = "CRC Errors: " + str(crc_errors) + " (" + crc_errors_percentage + " of all input packets)"
                                if float(crc_errors_percentage.strip('%')) >= crc_error_threshold:
                                    message += " !!ALERT!! CRC Errors are above threshold. Threshold currently set to: " + str(crc_error_threshold)+"%."
                                f.write(message + '\n')
                        if overrun_errors != 0 and input_packets == 0:               
                            f.write("ERROR: Total input packets are 0 but overrun errors are " + str(overrun_errors)+". Please check the interface manually.\n")
                        else:
                            if overrun_errors != 0 and input_packets != 0:
                                message = "Overrun Errors: " + str(overrun_errors) + " (" + overrun_errors_percentage + ' of all input packets' + ")"
                                if float(overrun_errors_percentage.strip('%')) >= overrun_error_threshold:
                                    message += " !!ALERT!! Overrun Errors are above threshold. Threshold currently set to: " + str(overrun_error_threshold)+"%."
                                f.write(message + '\n')
                        if frame_errors != 0 and input_packets == 0:
                            f.write("ERROR: Total input packets are 0 but frame errors are " + str(frame_errors)+". Please check the interface manually.\n")
                        else:
                            if frame_errors != 0 and input_packets != 0:
                                message = "Frame Errors: " + str(frame_errors) + " (" + frame_errors_percentage + ' of all input packets' + ")"
                                if float(frame_errors_percentage.strip('%')) >= frame_error_threshold:
                                    message += " !!ALERT!! Frame Errors are above threshold. Threshold currently set to: " + str(frame_error_threshold)+"%."
                                f.write(message + '\n')
                        if runts_errors != 0 and input_packets == 0:
                            f.write("ERROR: Total input packets are 0 but runt errors are " + str(runts_errors)+". Please check the interface manually.\n")
                        else:
                            if runts_errors != 0 and input_packets != 0:                            
                                message = "Runt Errors: " + str(runts_errors) + " (" + runts_errors_percentage + ' of all input packets' + ")"
                                if float(runts_errors_percentage.strip('%')) >= runts_error_threshold:
                                    message += " !!ALERT!! Runt Errors are above threshold. Threshold currently set to: " + str(runts_error_threshold)+"%."
                                f.write(message + '\n')
                        if giants_errors != 0 and input_packets == 0:
                            f.write("ERROR: Total input packets are 0 but giant errors are " + str(giants_errors)+". Please check the interface manually.\n")
                        else:
                            if giants_errors != 0 and input_packets != 0:
                                message = "Giant Errors: " + str(giants_errors) + " (" + giants_errors_percentage + ' of all input packets' + ")"
                                if float(giants_errors_percentage.strip('%')) >= giants_error_threshold:
                                    message += " !!ALERT!! Giant Errors are above threshold. Threshold currently set to: " + str(giants_error_threshold)+"%."
                                f.write(message + '\n')
                        if output_errors != 0 and output_packets == 0:
                            f.write("ERROR: Total output packets are 0 but output errors are " + str(output_errors)+". Please check the interface manually.\n")
                        else:    
                            if output_errors != 0 and output_packets != 0:
                                message = "Output Errors: " + str(output_errors) + " (" + output_errors_percentage + ' of all output packets' + ")"
                                if float(output_errors_percentage.strip('%')) >= output_error_threshold:
                                    message += " !! ALERT !! Output Errors are above the threshold you set set: " + str(output_error_threshold)+"%."
                                f.write(message + '\n')
                        f.write('\n')
                        f.write('--------------------------------------------------------------------------------------------------------------'+'\n')
                        f.write('\n')
            #// OUTPUT FILE - Close the output file and delete it if there are no errors
            if err == 0:
                f.close()
                os.remove(output_folder+fulloutput_file_name)        
            os.remove(input_folder+log_file)
            f.close()
            print("")
        if int_status == False:
            #// OUTPUT FILE - Create Output text file with the input file name and a timestamp appended
            with open(output_folder+now.strftime("%Y-%m-%d_")+input_file_name + "_errors" + ".txt", 'w') as f:
                output_file_name = os.path.splitext(os.path.basename(f.name))[0]
                fulloutput_file_name = os.path.basename(f.name)
                err = 0
                print("Processing: '" + fulloutput_file_name+"'")
                f.write("Generated by IntError Script on "+ now.strftime("%Y-%m-%d %H:%M")+" from file '"+input_file_name+"'."'\n\n')
                f.write("The following interfaces have errors:"'\n\n')
                f.write('--------------------------------------------------------'+'\n\n')
                for row in fsm_results:
                    #//  First, exclude any intefaces you want to exclude from the report
                    if 'Embedded-Service' in row[0]:
                        continue
                    #// if the interface has errors, then grab interface + description details and calculate the percentage of errors
                    has_errors = any(row[re_table.header.index(error_field)] not in ('0', 0, '') for error_field in error_fields)
                    if has_errors:
                        err = 1
                        if row[re_table.header.index('INPUT_PACKETS')] == '':
                            input_packets = 0
                        elif row[re_table.header.index('INPUT_PACKETS')] != 0:
                            input_packets = int(row[re_table.header.index('INPUT_PACKETS')])
                        if row[re_table.header.index('OUTPUT_PACKETS')] == '':
                            output_packets = 0
                        elif row[re_table.header.index('OUTPUT_PACKETS')] != 0:
                            output_packets = int(row[re_table.header.index('OUTPUT_PACKETS')])
                        interface_num = row[re_table.header.index('INTERFACE')]
                        description = row[re_table.header.index('DESCRIPTION')]
                        input_errors = int(row[re_table.header.index('INPUT_ERRORS')])
                        crc_errors = int(row[re_table.header.index('CRC')])
                        overrun_errors = int(row[re_table.header.index('OVERRUN')])
                        frame_errors = int(row[re_table.header.index('FRAME')])
                        runts_errors = int(row[re_table.header.index('RUNTS')])
                        giants_errors = int(row[re_table.header.index('GIANTS')])
                        output_errors = int(row[re_table.header.index('OUTPUT_ERRORS')])
                        #// calculate the percentage of errors for each error type. If there are no packets, then the percentage is 0.
                        if input_packets == 0:
                            input_errors_percentage = 0.0
                            crc_errors_percentage = 0.0
                            overrun_errors_percentage = 0.0
                            frame_errors_percentage = 0.0
                            runts_errors_percentage = 0.0
                            giants_errors_percentage = 0.0
                        elif output_packets == 0:
                            output_errors_percentage = 0.0
                        else:
                            if input_packets == 0:
                                input_errors_percentage = 0.0
                            else:
                                input_errors_percentage = dec_place.format(input_errors / input_packets)
                            if output_packets == 0:
                                output_errors_percentage = 0.0
                            else:
                                output_errors_percentage = dec_place.format(output_errors / output_packets)
                            if crc_errors == 0:
                                crc_errors_percentage = 0.0
                            else:
                                crc_errors_percentage = dec_place.format(crc_errors / input_packets)
                            if overrun_errors == 0:
                                overrun_errors_percentage = 0.0
                            else:
                                overrun_errors_percentage = dec_place.format(overrun_errors / input_packets)
                            if frame_errors == 0:
                                frame_errors_percentage = 0.0
                            else:
                                frame_errors_percentage = dec_place.format(frame_errors / input_packets)
                            if runts_errors == 0:
                                runts_errors_percentage = 0.0
                            else:
                                runts_errors_percentage = dec_place.format(runts_errors / input_packets)
                            if giants_errors == 0:
                                giants_errors_percentage = 0.0
                            else:
                                giants_errors_percentage = dec_place.format(giants_errors / input_packets)
                        #// if the interface has errors, then write the results to the file.
                        f.write(interface_num+'\n')
                        f.write('Description: '+description+'\n')
                        f.write('Status: '+row[1]+'\n')
                        if input_errors != 0 and input_packets == 0:
                            f.write("ERROR: Total input packets are 0 but output errors are " + str(input_errors)+". Please check the interface manually.\n")
                        else:
                            if input_errors != 0 and input_packets != 0:
                                message = "Input Errors: " + str(input_errors) + " (" + input_errors_percentage + ' of all input packets' + ")"
                                if float(input_errors_percentage.strip('%')) >= input_error_threshold:
                                    message += " !!ALERT!! Input Errors are above threshold. Threshold currently set to: " + str(input_error_threshold)+"%."
                                f.write(message + '\n')
                        if crc_errors != 0 and input_packets == 0:
                            f.write("ERROR: Total input packets are 0 but CRC errors are: " + str(crc_errors)+". Please check the interface manually.\n")
                        else:
                            if crc_errors != 0 and input_packets != 0:
                                message = "CRC Errors: " + str(crc_errors) + " (" + crc_errors_percentage + " of all input packets)"
                                if float(crc_errors_percentage.strip('%')) >= crc_error_threshold:
                                    message += " !!ALERT!! CRC Errors are above threshold. Threshold currently set to: " + str(crc_error_threshold)+"%."
                                f.write(message + '\n')
                        if overrun_errors != 0 and input_packets == 0:               
                            f.write("ERROR: Total input packets are 0 but overrun errors are " + str(overrun_errors)+". Please check the interface manually.\n")
                        else:
                            if overrun_errors != 0 and input_packets != 0:
                                message = "Overrun Errors: " + str(overrun_errors) + " (" + overrun_errors_percentage + ' of all input packets' + ")"
                                if float(overrun_errors_percentage.strip('%')) >= overrun_error_threshold:
                                    message += " !!ALERT!! Overrun Errors are above threshold. Threshold currently set to: " + str(overrun_error_threshold)+"%."
                                f.write(message + '\n')
                        if frame_errors != 0 and input_packets == 0:
                            f.write("ERROR: Total input packets are 0 but frame errors are " + str(frame_errors)+". Please check the interface manually.\n")
                        else:
                            if frame_errors != 0 and input_packets != 0:
                                message = "Frame Errors: " + str(frame_errors) + " (" + frame_errors_percentage + ' of all input packets' + ")"
                                if float(frame_errors_percentage.strip('%')) >= frame_error_threshold:
                                    message += " !!ALERT!! Frame Errors are above threshold. Threshold currently set to: " + str(frame_error_threshold)+"%."
                                f.write(message + '\n')
                        if runts_errors != 0 and input_packets == 0:
                            f.write("ERROR: Total input packets are 0 but runt errors are " + str(runts_errors)+". Please check the interface manually.\n")
                        else:
                            if runts_errors != 0 and input_packets != 0:                            
                                message = "Runt Errors: " + str(runts_errors) + " (" + runts_errors_percentage + ' of all input packets' + ")"
                                if float(runts_errors_percentage.strip('%')) >= runts_error_threshold:
                                    message += " !!ALERT!! Runt Errors are above threshold. Threshold currently set to: " + str(runts_error_threshold)+"%."
                                f.write(message + '\n')
                        if giants_errors != 0 and input_packets == 0:
                            f.write("ERROR: Total input packets are 0 but giant errors are " + str(giants_errors)+". Please check the interface manually.\n")
                        else:
                            if giants_errors != 0 and input_packets != 0:
                                message = "Giant Errors: " + str(giants_errors) + " (" + giants_errors_percentage + ' of all input packets' + ")"
                                if float(giants_errors_percentage.strip('%')) >= giants_error_threshold:
                                    message += " !!ALERT!! Giant Errors are above threshold. Threshold currently set to: " + str(giants_error_threshold)+"%."
                                f.write(message + '\n')
                        if output_errors != 0 and output_packets == 0:
                            f.write("ERROR: Total output packets are 0 but output errors are " + str(output_errors)+". Please check the interface manually.\n")
                        else:    
                            if output_errors != 0 and output_packets != 0:
                                message = "Output Errors: " + str(output_errors) + " (" + output_errors_percentage + ' of all output packets' + ")"
                                if float(output_errors_percentage.strip('%')) >= output_error_threshold:
                                    message += " !! ALERT !! Output Errors are above the threshold you set set: " + str(output_error_threshold)+"%."
                                f.write(message + '\n')
                        f.write('\n')
                        f.write('--------------------------------------------------------------------------------------------------------------'+'\n')
                        f.write('\n')
            #// OUTPUT FILE - Close the output file and delete it if there are no errors
            if err == 0:
                f.close()
                os.remove(output_folder+fulloutput_file_name)      
            os.remove(input_folder+log_file)
            f.close()
            print("")
print("*** Finished running script. ***") 
print("Script version: " + version)
print("")